language: ruby
rvm:
 - 2.5.0
 - jruby

# # Cache gems
# cache:
#   bundler: true
#   directories:
#     - node_modules

# addons:
#   chrome: stable
#   #firefox: latest

# env:
#   global:
#     CC_TEST_REPORTER_ID=ABC123

# before_install:
#   - nvm install                         # Install node version from .nvmrc
#   - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
#   - chmod +x ./cc-test-reporter
#   #- export DISPLAY=:99.0                # Display number for xvfb (for headless browser testing)
#   #- sh -e /etc/init.d/xvfb start        # Start xvfb (for headless browser testing)

# install:
#   - bundle install --without production --path=${BUNDLE_PATH:-vendor/bundle}  # Install ruby gems, excluding production only gems such as unicorn (already present by default in Travis)
#   - npm install                         # Install npm dependencies
#   #- npm install karma-firefox-launcher codeclimate-test-reporter

# # Setup the database
# before_script: bundle exec rake db:create db:migrate

# # Run the test suites
# script:
#   # - bundle exec rubocop -DESP           # Backend linting
#   - bundle exec rake           # Backend specs
#   - bundle exec rspec          # rspec testing

# # Pipe the coverage data to Code Climate
# after_script:
#   - ./cc-test-reporter format-coverage -t simplecov -o coverage/codeclimate.backend.json coverage/backend/.resultset.json # Format backend coverage
#   - ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.frontend.json coverage/frontend/lcov.info  # Format frontend coverage
#   - ./cc-test-reporter sum-coverage coverage/codeclimate.*.json -p 2                  # Sum both coverage parts into coverage/codeclimate.json
#   - if [[ "$TRAVIS_TEST_RESULT" == 0 ]]; then ./cc-test-reporter upload-coverage; fi  # Upload coverage/codeclimate.json

deploy:
  provider: heroku
  api_key:
    secure: "iewJbVCj78FpQjmLIlm092hEYjIvnu8xSA3mBf1qPR73H+hjtQAqDm5Pg37CTT+4q4DkjRMNUfivS/fNUYDZUqWRbJVxLBHRcYKhNxa/UesN0jl4gQdtvZzh0g/a/Xey8MFGHIYMIoGFYwCDEk4iirN8QAFvR1OcVMdxbQDJEyT9bgRmDx94SUWVLxIrIMCU5Un1Xp7jIjI+A5b5T4FQeki8z/FVEgnxlVyEx5oxn95oGKrTwMMs72Ecjs7v68OTO3DUbRDeSCgGJv+idTDMPLywIFjbc27hDuOU0Ki5tF5s4cZtkKi7UNp/z05QI8J8ezg1vKWy55Tn/SOo/fKtHb+dFHEYEwGbwVUSGEYkBaFK/ScDjFMMq7JISF+vccWXjmsa5o/3Cu96p3lMA4QJDkSF1Beo7mrAdBp2ymhPQ9NiJd26HeqfGfcwvuMJC/5wH9Igiwc+OJJAA428U9W+Zpmvnwn0e+iGedKkaX/Zwt/Y0Q+hHWtWsdlyZPzsBqGXDo288UuYo71wS+DSWlMZ4+/zaJNGsau1Hi9cUofuXseXrZ0epPPR0Z10h3LYgI8VN+a5hOxn1lATFmXatllhPQ7qp5COdHISN6GFzUkDFBjd1whY81HL/FWJIceJrsjdautKbZCtSJH8Q1VFDDqNL0Otln2DXjaMb+cNbQ3lSpw="


